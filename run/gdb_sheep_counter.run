#
# Build
#

build { core init test/sheep_counter drivers/timer drivers/uart app/gdb_monitor }

create_boot_directory

#
# Generate config
#

install_config {
<config>
	<parent-provides>
		<service name="PD"/>
		<service name="CPU"/>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="LOG"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Timer"/> </provides>
	</start>
	<start name="uart_drv">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Terminal"/>
			<service name="Uart"/>
		</provides>
		<config>
			<policy label="gdb_monitor" uart="1"/>
		</config>
	</start>
	<start name="gdb_monitor">
		<resource name="RAM" quantum="4M"/>
		<config>
			<target name="sheep_counter">
				<config>
					<libc stdout="/dev/log" stderr="/dev/log">
						<vfs> <dir name="dev"> <log/> </dir> </vfs>
					</libc>
				</config>
			</target>
			<preserve name="RAM" quantum="3M"/>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
	</start>
</config>}

#
# Boot image
#

build_boot_image { 
	core init timer
	ld.lib.so libc.lib.so libc_pipe.lib.so libc_terminal.lib.so 
	uart_drv 
	gdb_monitor sheep_counter 
}

set local_port 5555

# qemu config
append qemu_args " -m 128 -nographic "

# connect comport 0 to stdio
append qemu_args " -serial mon:stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait,ipv4 "

run_genode_until {.*\[init -> gdb_monitor\].*} 30

puts "GDB monitor is up, starting GDB in a new terminal"

source ${genode_dir}/repos/ports/run/gdb_monitor.inc

set gdb_target_binary "sheep_counter"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds "-ex \"target remote localhost:$local_port\" "

append gdb_cmds [gdb_main_breakpoint_cmds $gdb_target_binary]

# ask the user for confirmations again
append gdb_cmds {-ex "set interactive-mode auto" }

puts "command: [gdb] bin/$gdb_target_binary $gdb_cmds"

exec [terminal] -e "[gdb] bin/ld.lib.so $gdb_cmds" &

interact -i [output_spawn_id]
