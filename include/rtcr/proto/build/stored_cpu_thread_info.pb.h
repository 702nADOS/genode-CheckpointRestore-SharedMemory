// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stored_cpu_thread_info.proto

#ifndef PROTOBUF_stored_5fcpu_5fthread_5finfo_2eproto__INCLUDED
#define PROTOBUF_stored_5fcpu_5fthread_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_stored_5fcpu_5fthread_5finfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsStored_cpu_thread_infoImpl();
void InitDefaultsStored_cpu_thread_info();
inline void InitDefaults() {
  InitDefaultsStored_cpu_thread_info();
}
}  // namespace protobuf_stored_5fcpu_5fthread_5finfo_2eproto
namespace protobuf {
class Stored_cpu_thread_info;
class Stored_cpu_thread_infoDefaultTypeInternal;
extern Stored_cpu_thread_infoDefaultTypeInternal _Stored_cpu_thread_info_default_instance_;
}  // namespace protobuf
namespace protobuf {

// ===================================================================

class Stored_cpu_thread_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuf.Stored_cpu_thread_info) */ {
 public:
  Stored_cpu_thread_info();
  virtual ~Stored_cpu_thread_info();

  Stored_cpu_thread_info(const Stored_cpu_thread_info& from);

  inline Stored_cpu_thread_info& operator=(const Stored_cpu_thread_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stored_cpu_thread_info(Stored_cpu_thread_info&& from) noexcept
    : Stored_cpu_thread_info() {
    *this = ::std::move(from);
  }

  inline Stored_cpu_thread_info& operator=(Stored_cpu_thread_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stored_cpu_thread_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stored_cpu_thread_info* internal_default_instance() {
    return reinterpret_cast<const Stored_cpu_thread_info*>(
               &_Stored_cpu_thread_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Stored_cpu_thread_info* other);
  friend void swap(Stored_cpu_thread_info& a, Stored_cpu_thread_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stored_cpu_thread_info* New() const PROTOBUF_FINAL { return New(NULL); }

  Stored_cpu_thread_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stored_cpu_thread_info& from);
  void MergeFrom(const Stored_cpu_thread_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stored_cpu_thread_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string weight = 3;
  void clear_weight();
  static const int kWeightFieldNumber = 3;
  const ::std::string& weight() const;
  void set_weight(const ::std::string& value);
  #if LANG_CXX11
  void set_weight(::std::string&& value);
  #endif
  void set_weight(const char* value);
  void set_weight(const char* value, size_t size);
  ::std::string* mutable_weight();
  ::std::string* release_weight();
  void set_allocated_weight(::std::string* weight);

  // uint32 pd_session_badge = 1;
  void clear_pd_session_badge();
  static const int kPdSessionBadgeFieldNumber = 1;
  ::google::protobuf::uint32 pd_session_badge() const;
  void set_pd_session_badge(::google::protobuf::uint32 value);

  // uint32 utcb = 4;
  void clear_utcb();
  static const int kUtcbFieldNumber = 4;
  ::google::protobuf::uint32 utcb() const;
  void set_utcb(::google::protobuf::uint32 value);

  // bool started = 5;
  void clear_started();
  static const int kStartedFieldNumber = 5;
  bool started() const;
  void set_started(bool value);

  // bool paused = 6;
  void clear_paused();
  static const int kPausedFieldNumber = 6;
  bool paused() const;
  void set_paused(bool value);

  // bool single_step = 7;
  void clear_single_step();
  static const int kSingleStepFieldNumber = 7;
  bool single_step() const;
  void set_single_step(bool value);

  // uint32 affinity = 8;
  void clear_affinity();
  static const int kAffinityFieldNumber = 8;
  ::google::protobuf::uint32 affinity() const;
  void set_affinity(::google::protobuf::uint32 value);

  // uint32 sigh_badge = 9;
  void clear_sigh_badge();
  static const int kSighBadgeFieldNumber = 9;
  ::google::protobuf::uint32 sigh_badge() const;
  void set_sigh_badge(::google::protobuf::uint32 value);

  // uint32 ts = 10;
  void clear_ts();
  static const int kTsFieldNumber = 10;
  ::google::protobuf::uint32 ts() const;
  void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protobuf.Stored_cpu_thread_info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr weight_;
  ::google::protobuf::uint32 pd_session_badge_;
  ::google::protobuf::uint32 utcb_;
  bool started_;
  bool paused_;
  bool single_step_;
  ::google::protobuf::uint32 affinity_;
  ::google::protobuf::uint32 sigh_badge_;
  ::google::protobuf::uint32 ts_;
  mutable int _cached_size_;
  friend struct ::protobuf_stored_5fcpu_5fthread_5finfo_2eproto::TableStruct;
  friend void ::protobuf_stored_5fcpu_5fthread_5finfo_2eproto::InitDefaultsStored_cpu_thread_infoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stored_cpu_thread_info

// uint32 pd_session_badge = 1;
inline void Stored_cpu_thread_info::clear_pd_session_badge() {
  pd_session_badge_ = 0u;
}
inline ::google::protobuf::uint32 Stored_cpu_thread_info::pd_session_badge() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.pd_session_badge)
  return pd_session_badge_;
}
inline void Stored_cpu_thread_info::set_pd_session_badge(::google::protobuf::uint32 value) {
  
  pd_session_badge_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.pd_session_badge)
}

// string name = 2;
inline void Stored_cpu_thread_info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Stored_cpu_thread_info::name() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.name)
  return name_.GetNoArena();
}
inline void Stored_cpu_thread_info::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.name)
}
#if LANG_CXX11
inline void Stored_cpu_thread_info::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Stored_cpu_thread_info.name)
}
#endif
inline void Stored_cpu_thread_info::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Stored_cpu_thread_info.name)
}
inline void Stored_cpu_thread_info::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Stored_cpu_thread_info.name)
}
inline ::std::string* Stored_cpu_thread_info::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Stored_cpu_thread_info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stored_cpu_thread_info::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.Stored_cpu_thread_info.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stored_cpu_thread_info::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Stored_cpu_thread_info.name)
}

// string weight = 3;
inline void Stored_cpu_thread_info::clear_weight() {
  weight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Stored_cpu_thread_info::weight() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.weight)
  return weight_.GetNoArena();
}
inline void Stored_cpu_thread_info::set_weight(const ::std::string& value) {
  
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.weight)
}
#if LANG_CXX11
inline void Stored_cpu_thread_info::set_weight(::std::string&& value) {
  
  weight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuf.Stored_cpu_thread_info.weight)
}
#endif
inline void Stored_cpu_thread_info::set_weight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.Stored_cpu_thread_info.weight)
}
inline void Stored_cpu_thread_info::set_weight(const char* value, size_t size) {
  
  weight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.Stored_cpu_thread_info.weight)
}
inline ::std::string* Stored_cpu_thread_info::mutable_weight() {
  
  // @@protoc_insertion_point(field_mutable:protobuf.Stored_cpu_thread_info.weight)
  return weight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stored_cpu_thread_info::release_weight() {
  // @@protoc_insertion_point(field_release:protobuf.Stored_cpu_thread_info.weight)
  
  return weight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stored_cpu_thread_info::set_allocated_weight(::std::string* weight) {
  if (weight != NULL) {
    
  } else {
    
  }
  weight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight);
  // @@protoc_insertion_point(field_set_allocated:protobuf.Stored_cpu_thread_info.weight)
}

// uint32 utcb = 4;
inline void Stored_cpu_thread_info::clear_utcb() {
  utcb_ = 0u;
}
inline ::google::protobuf::uint32 Stored_cpu_thread_info::utcb() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.utcb)
  return utcb_;
}
inline void Stored_cpu_thread_info::set_utcb(::google::protobuf::uint32 value) {
  
  utcb_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.utcb)
}

// bool started = 5;
inline void Stored_cpu_thread_info::clear_started() {
  started_ = false;
}
inline bool Stored_cpu_thread_info::started() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.started)
  return started_;
}
inline void Stored_cpu_thread_info::set_started(bool value) {
  
  started_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.started)
}

// bool paused = 6;
inline void Stored_cpu_thread_info::clear_paused() {
  paused_ = false;
}
inline bool Stored_cpu_thread_info::paused() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.paused)
  return paused_;
}
inline void Stored_cpu_thread_info::set_paused(bool value) {
  
  paused_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.paused)
}

// bool single_step = 7;
inline void Stored_cpu_thread_info::clear_single_step() {
  single_step_ = false;
}
inline bool Stored_cpu_thread_info::single_step() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.single_step)
  return single_step_;
}
inline void Stored_cpu_thread_info::set_single_step(bool value) {
  
  single_step_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.single_step)
}

// uint32 affinity = 8;
inline void Stored_cpu_thread_info::clear_affinity() {
  affinity_ = 0u;
}
inline ::google::protobuf::uint32 Stored_cpu_thread_info::affinity() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.affinity)
  return affinity_;
}
inline void Stored_cpu_thread_info::set_affinity(::google::protobuf::uint32 value) {
  
  affinity_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.affinity)
}

// uint32 sigh_badge = 9;
inline void Stored_cpu_thread_info::clear_sigh_badge() {
  sigh_badge_ = 0u;
}
inline ::google::protobuf::uint32 Stored_cpu_thread_info::sigh_badge() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.sigh_badge)
  return sigh_badge_;
}
inline void Stored_cpu_thread_info::set_sigh_badge(::google::protobuf::uint32 value) {
  
  sigh_badge_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.sigh_badge)
}

// uint32 ts = 10;
inline void Stored_cpu_thread_info::clear_ts() {
  ts_ = 0u;
}
inline ::google::protobuf::uint32 Stored_cpu_thread_info::ts() const {
  // @@protoc_insertion_point(field_get:protobuf.Stored_cpu_thread_info.ts)
  return ts_;
}
inline void Stored_cpu_thread_info::set_ts(::google::protobuf::uint32 value) {
  
  ts_ = value;
  // @@protoc_insertion_point(field_set:protobuf.Stored_cpu_thread_info.ts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stored_5fcpu_5fthread_5finfo_2eproto__INCLUDED
